<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat</title>
    <link rel="icon" type="image/svg+xml"
        href="https://uxwing.com/wp-content/themes/uxwing/download/communication-chat-call/video-call-icon.png">
    <style>
        /* Styles unchanged */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        #videos {
            display: grid;
            grid-template-columns: 1fr;
            height: 100vh;
            overflow: hidden;
        }

        .video-player {
            background-color: black;
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .smallFrame {
            position: fixed;
            bottom: 100px;
            right: 20px;
            height: 170px;
            width: 300px;
            border-radius: 6px;
            z-index: 10;
        }

        #controls {
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            gap: 1em;
        }

        .control-container {
            background-color: #6df966;
            padding: 20px;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: pointer;
        }

        .control-container svg {
            height: 30px;
            width: 30px;
        }

        #leave-btn {
            background-color: rgb(255, 80, 80, 1);
        }

        @media screen and (max-width: 600px) {
            .smallFrame {
                height: 80px;
                width: 120px;
            }

            .control-container img {
                height: 20px;
                width: 20px;
            }
        }
    </style>
    <link href="/css/style.css" rel="stylesheet">
</head>

<body class="flex flex-col h-dvh bg-gray-200">
    <%- include('partials/header') %>
    <div class="fixed videoblock hidden z-[222] w-full h-svh">
        <div id="videos">
            <video class="video-player" id="localVideo" autoplay muted playsinline></video>
            <video class="video-player" id="remoteVideo" autoplay playsinline></video>
        </div>
        <div id="controls">
            <div class="control-container" id="cameraButton">
                <!-- Camera SVG Icon -->
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-video">
                    <path d="M23 7l-7 5 7 5V7z"></path>
                    <path d="M16 4a4 4 0 0 0-4 4v8a4 4 0 0 0 4 4h4a4 4 0 0 0 4-4V8a4 4 0 0 0-4-4h-4z"></path>
                </svg>
            </div>

            <div class="control-container" id="hangup">
                <!-- Hangup (Red Phone) SVG Icon -->
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-phone-off">
                    <path d="M10.29 14.29l-1.41 1.41L13.17 18H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2h-9.17z"></path>
                </svg>
            </div>

            <div class="control-container" id="micButton">
                <!-- Microphone SVG Icon -->
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-mic">
                    <path d="M12 1v12a4 4 0 0 0 4 4h4v4h-4a8 8 0 0 1-8-8V1h4z"></path>
                </svg>
            </div>
        </div>
    </div>
    <div id="incoming-call"
        class="fixed hidden z-[222] w-full h-dvh bg-gray-900 bg-opacity-75 flex items-center justify-center">
        <div class="bg-white p-8 rounded-md text-center">
            <p class="mb-4">Incoming Call...</p>
            <button id="accept-call" class="bg-green-500 text-white py-2 px-4 rounded-md">Accept</button>
            <button id="reject-call" class="bg-red-500 text-white py-2 px-4 rounded-md ml-2">Reject</button>
        </div>
    </div>
    <main class="flex-1 p-4 overflow-y-auto relative" id="message-container">
        <div
            class="text-zinc-400 absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-2/3 text-center nobody">
            If someone "Joins" this message will disappear!
        </div>
    </main>
    <form id="chatform" class="bg-white p-4 flex">
        <input type="hidden" id="userid" value="">
        <input type="text" id="messagebox"
            class="flex-1 border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
            placeholder="Type a message">
        <button type="submit"
            class="ml-2 bg-indigo-600 text-white py-2 px-4 rounded-md hover:bg-indigo-700">Send</button>
    </form>

    <script src="https://cdn.socket.io/4.8.1/socket.io.min.js"
            integrity="sha384-mkQ3/7FUtcGyoppY6bz/PORYoGqOl7/aSUMn2ymDOJcapfS6PHqxhRTMh1RR0Q6+"
            crossorigin="anonymous"></script>

    <script>
        const socket = io();
        const chatform = document.querySelector('#chatform');
        const messagebox = document.querySelector('#messagebox');
        const messagecontainer = document.querySelector('#message-container');
        let room;
        socket.emit("joinroom");

        socket.on("joined", function (roomname) {
            room = roomname;
            document.querySelector(".nobody").classList.add("hidden");
        });
        socket.on("message", (message) => {
            receiveMessage(message);
        });
        chatform.addEventListener("submit", function (event) {
            event.preventDefault();
            socket.emit("message", { room: room, message: messagebox.value });
            attachMessage(messagebox.value);
            messagebox.value = "";
        });

        function attachMessage(message) {
            const userMessageContainer = document.createElement('div');
            userMessageContainer.classList.add('flex', 'my-2', 'justify-end');

            const userMessageDiv = document.createElement('div');
            userMessageDiv.classList.add('bg-blue-500', 'text-white', 'p-3', 'rounded-lg', 'max-w-xs');

            const userMessageText = document.createElement('p');
            userMessageText.textContent = message;

            userMessageDiv.appendChild(userMessageText);
            userMessageContainer.appendChild(userMessageDiv);
            document.getElementById('message-container').appendChild(userMessageContainer);
            document.querySelector("#message-container").scrollTop = document.querySelector("#message-container").scrollHeight;
        }

        function receiveMessage(message) {
            const messageContainer = document.createElement('div');
            messageContainer.classList.add('flex', 'my-2', 'justify-start');

            const messageDiv = document.createElement('div');
            messageDiv.classList.add('bg-gray-300', 'text-gray-800', 'p-3', 'rounded-lg', 'max-w-xs');

            const messageText = document.createElement('p');
            messageText.textContent = message;

            messageDiv.appendChild(messageText);
            messageContainer.appendChild(messageDiv);
            document.getElementById('message-container').appendChild(messageContainer);
            document.querySelector("#message-container").scrollTop = document.querySelector("#message-container").scrollHeight;
        }

        // WebRTC Section
        let localStream;
        let remoteStream;
        let peerConnection;
        let inCall = false;
        const rtcSettings = {
            iceServers: [{ urls: 'stun:stun.l.google.com:19302' }],
        };

        const initialize = async () => {
            socket.on("signalingMessage", handleSignalingMessage);

            try {
                localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
                document.querySelector('#localVideo').srcObject = localStream; // Updated ID
                document.querySelector('#localVideo').style.display = "block";

                initiateOffer();
                inCall = true;
            } catch (error) {
                console.log("Rejected by browser", error);
            }
        };

        const initiateOffer = async () => {
            await createPeerConnection();
            try {
                const offer = await peerConnection.createOffer();
                await peerConnection.setLocalDescription(offer);
                socket.emit("signalingMessage", {
                    room,
                    message: JSON.stringify({
                        type: "offer",
                        offer
                    })
                });
            } catch (error) {
                console.log("Error in creating offer", error);
            }
        };

        const createPeerConnection = async () => {
            peerConnection = new RTCPeerConnection(rtcSettings);
            remoteStream = new MediaStream();
            document.querySelector("#remoteVideo").srcObject = remoteStream; // Updated ID
            document.querySelector("#remoteVideo").style.display = "block";
            document.querySelector("#localVideo").classList.add("smallFrame");

            localStream.getTracks().forEach(track => {
                peerConnection.addTrack(track, localStream);
            });

            peerConnection.ontrack = (event) => {
                event.streams[0].getTracks().forEach(track => {
                    remoteStream.addTrack(track);
                });
            };
            peerConnection.onicecandidate = (event) => {
                if (event.candidate) {
                    console.log("Sending ice candidate");
                    socket.emit("signalingMessage", {
                        room,
                        message: JSON.stringify({
                            type: "candidate",
                            candidate: event.candidate
                        })
                    });
                }
            };
            peerConnection.onconnectionstatechange = () => {
                console.log("Connection state changed!", peerConnection.connectionState);
            };
        };

        const handleSignalingMessage = async (message) => {
            const { type, offer, answer, candidate } = JSON.parse(message);
            if (type === "offer") handleOffer(offer);
            if (type === "answer") handleAnswer(answer);
            if (type === "candidate" && peerConnection) {
                try {
                    await peerConnection.addIceCandidate(candidate);
                } catch (error) {
                    console.log(error.message);
                }
            }
            if(type ==="hangup"){
                hangup()
            }
        };

        const handleOffer = async (offer) => {
            await createPeerConnection();
            try {
                await peerConnection.setRemoteDescription(offer);
                const answer = await peerConnection.createAnswer();
                await peerConnection.setLocalDescription(answer);
                socket.emit("signalingMessage", { room, message: JSON.stringify({ type: "answer", answer }) });
                inCall = true;
            } catch (error) {
                console.log("Failed to handle offer", error);
            }
        };

        const handleAnswer = async (answer) => {
            try {
                await peerConnection.setRemoteDescription(answer);
            } catch (error) {
                console.log("Failed to handle answer", error);
            }
        };

        document.querySelector("#video-call-btn")?.addEventListener("click", function () {
            socket.emit("startVideoCall", { room });
        });

        socket.on("incomingCall", function () {
            document.querySelector("#incoming-call").classList.remove("hidden");
        });

        socket.on("callAccepted", function () {
            initialize();
            document.querySelector(".videoblock").classList.remove("hidden");
        });

        document.querySelector("#accept-call").addEventListener("click", function () {
            document.querySelector("#incoming-call").classList.add("hidden");
            initialize();
            document.querySelector(".videoblock").classList.remove("hidden");
            socket.emit("acceptCall", { room });
        });

        document.querySelector("#reject-call").addEventListener("click", function () {
            document.querySelector("#incoming-call").classList.add("hidden");
            socket.emit("rejectCall", { room });
        });
        socket.on("rejectCall", function(){
            alert("Call rejected by the user");
        });
        document.querySelector('#hangup')
        .addEventListener('click', function() {
           hangup();
        })
        function hangup(){
            if(peerConnection){
                peerConnection.close();
                peerConnection = null;
                localStream.getTracks().forEach((track) => track.stop())

                document.querySelector(".videoblock").classList.add('hidden');
                socket.emit("signalingMessage",{room,message:JSON.stringify({type:"hangup"})})
                inCall=false;
            }
        }
    </script>
</body>

</html>
